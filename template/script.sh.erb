#!/usr/bin/bash -l
<%

# Set our working directory.
working_dir = Pathname.new(context.working_dir)

code_server_version   = context.version

# Ensure that code-server always starts up in either a user defined directory or the home directory.
if ! working_dir.exist?
    working_dir = Pathname.new(ENV['HOME'])
elsif working_dir.file?
    working_dir = working_dir.parent
end
%>

CODE_SERVER_DATAROOT="$HOME/.local/share/code-server"
mkdir -p "$CODE_SERVER_DATAROOT/extensions"

# Expose the password to the server.
export PASSWORD="$password"
echo "password is $PASSWORD"
# echo -n "$password" | npx argon2-cli -e # this won't work but maybe something else will
# export HASHED_PASSWORD="<hash>"

# Print compute node.
echo "$(date): Running on compute node ${compute_node}:$port"

# VSCode complains that system git is too old.
# module load project/ondemand git app_code_server/<%= code_server_version %>

# Activate the shared spack environment
. /shared/software/spack/share/spack/setup-env.sh
echo "which spack:"
which spack

# Use spack to load code-server
spack unload --all
spack load code-server@3.10.2

CPP_FILE="<%= working_dir.to_s %>/.vscode/c_cpp_properties.json"

if [[ -f "$CPP_FILE" ]]; then
    CPP_DIR="${TMPDIR:=/tmp/$USER}/cpp-vscode"
    mkdir -p "$CPP_DIR"
    chmod 700 "$CPP_DIR"

    # if the file is empty, let's initialize it
    [ -s "$CPP_FILE" ] || echo '{"configurations": [{ "name": "Linux", "browse": { "databaseFilename": null }}], "version": 4}' > "$CPP_FILE"

    jq --arg dbfile "$CPP_DIR/cpp-vscode.db" \
      '.configurations[0].browse.databaseFilename = $dbfile' \
      "$CPP_FILE" > "$CPP_FILE".new

    mv "$CPP_FILE".new "$CPP_FILE"
  fi

#
# Start Code Server.
#
echo "$(date): Started code-server"
echo ""

code-server \
    --auth="password" \
    --bind-addr="0.0.0.0:${port}" \
    --disable-telemetry \
    --ignore-last-opened \
    --user-data-dir="$CODE_SERVER_DATAROOT" \
    --log debug \
    --verbose \
    "<%= working_dir.to_s %>"
